from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from services.database import Database
from keyboards.inline import favorites_keyboard, delete_favorites_keyboard
import logging

router = Router()
logger = logging.getLogger(__name__)

async def get_recipe_data_from_message(message_text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    lines = [line.strip() for line in message_text.split('\n') if line.strip()]
    
    data = {
        'title': '',
        'image': None,
        'source_url': None
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for line in lines:
        if 'üç¥' in line:  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
            data['title'] = line.split('üç¥')[-1].strip()
        elif 'üì∑' in line:  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            data['image'] = line.split('üì∑')[-1].strip()
        elif 'üîó' in line:  # –°—Å—ã–ª–∫–∞
            data['source_url'] = line.split('üîó')[-1].strip()
    
    return data

@router.message(Command("favorites"))
async def show_favorites_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    db = Database()
    await db.increment_stat('favorites_views')
    await show_favorites(message)

async def show_favorites(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    try:
        db = Database()
        user_id = message_or_callback.from_user.id
        
        favorites = await db.get_favorites(user_id)
        
        if not favorites:
            text = ("‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
                   "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª—é–±–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞")
            keyboard = favorites_keyboard()
        else:
            response = []
            for i, recipe in enumerate(favorites[:10], 1):
                item = f"{i}. {recipe.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
                if recipe.get('image'):
                    item += f"\nüì∑ {recipe['image']}"
                if recipe.get('source_url'):
                    item += f"\nüîó {recipe['source_url']}"
                response.append(item)
            
                text = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n" + "\n\n".join(response)
                keyboard = favorites_keyboard(has_recipes=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ - Message –∏–ª–∏ CallbackQuery
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, reply_markup=keyboard, disable_web_page_preview=True)
        else: 
            await message_or_callback.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
            
    except Exception as e:
        logger.error(f"Error showing favorites: {str(e)}", exc_info=True)
        error_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(error_text)
        else:  
            await message_or_callback.message.edit_text(error_text)

@router.callback_query(F.data.startswith("save_"))
async def save_to_favorites(callback: CallbackQuery):
    try:
        db = Database()
        user_id = callback.from_user.id
        recipe_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        recipe_data = await get_recipe_data_from_message(callback.message.text)
        recipe_data['id'] = recipe_id
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Extracted recipe data: {recipe_data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not recipe_data.get('title'):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞")
        if not recipe_data.get('id'):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        if await db.add_favorite(user_id, recipe_data):
            await callback.answer("‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", show_alert=True)
        else:
            await callback.answer("‚ÑπÔ∏è –†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", show_alert=True)
            
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {callback.message.text}")
        await callback.answer(f"‚ö†Ô∏è {str(e)}", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = (
        "üë®‚Äçüç≥ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/find_by_ingredients - –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º\n"
        "/random - –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
        "/favorites - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    await callback.message.answer(welcome_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.callback_query(F.data == "delete_favorites")
async def delete_favorites_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        db = Database()
        user_id = callback.from_user.id
        favorites = await db.get_favorites(user_id)
        
        if not favorites:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return
            
        text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, recipe in enumerate(favorites[:10], 1):
            text += f"{i}. {recipe.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            
        await callback.message.edit_text(
            text,
            reply_markup=delete_favorites_keyboard(favorites)
        )
    except Exception as e:
        logger.error(f"Error showing delete menu: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
@router.callback_query(F.data.startswith("delete_fav_"))
async def remove_from_favorites(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        db = Database()
        user_id = callback.from_user.id
        recipe_id = int(callback.data.split("_")[2])
        
        if await db.remove_favorite(user_id, recipe_id):
            await callback.answer("üóëÔ∏è –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - –û–ë–ù–û–í–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ
            await show_favorites(callback)
        else:
            await callback.answer("‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    except Exception as e:
        logger.error(f"Error removing favorite: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
@router.callback_query(F.data == "favorites_back")
async def favorites_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - –û–ë–ù–û–í–õ–Ø–ï–¢ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await show_favorites(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "delete_all_favorites")
async def delete_all_favorites(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"""
    try:
        db = Database()
        user_id = callback.from_user.id
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        deleted_count = await db.remove_all_favorites(user_id)
        
        if deleted_count == 0:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return
        
        await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–π)
        await show_favorites(callback)
        
    except Exception as e:
        logger.error(f"Error deleting all favorites: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", show_alert=True)